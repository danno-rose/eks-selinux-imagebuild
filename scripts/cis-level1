#!/usr/bin/env bash

#!/bin/sh
# This is the CIS bash script for Kubernetes to be run against Amazon EKS Optimised AMI.



#######
# CIS 4.1.1 
#######
# The following bash ensures that the kubelet service file has permissions of 644 or more restrictive.
# The kubelet service file controls various parameters that set the behavior of the kubelet service in the worker node. 
# You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
# This checks the existance of 10-kubelet-args.conf

if [ -f "/etc/systemd/system/kubelet.service.d/10-kubelet-args.conf"  ]; 
then
    perm=$(stat -c %a /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf)
    if [ $perm -le "644" ];
    then
        echo "file has tight permissions";
    else
        sudo chmod 644 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf
    fi
fi

#######
#Audit:
#######

# # stat -c %a /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf
# # Verify that the permissions are 644 or more restrictive   - Ansible or Ruby check for allowed values [644, Define] - if equals allowed values return [ok]

# stat -c %a /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf
# if "644"
# # Need to define all allowed values

# then
# echo "OK"
# else
# echo "FAIL"





##########
# CIS 4.1.2 Ensure that the kubelet service file ownership is set to root:root
#########


cd /etc/systemd/system/kubelet.service.d/
filename=$10-kubelet-args.conf
# This checks the existance of 10-kubelet-args.conf

if [ -f "$filename"  ]; then 
sudo chown root:root /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf

else 
echo "File does not exist"
fi 

#######
# Audit Check
#######


stat -c %U:%G /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf
if "root:root"
then
echo "OK"
else
echo "FAIL"

# stat -c %U:%G /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf
# Ruby check for allowed values [root:root] - if equals allowed values return [ok]



# Note Kubelet is run as semi-root priv - Need to test this with SELinux doesnt break it. 



######
# CIS 4.1.3 
######

# proxy kubeconfig file permissions are set to 644 or more restrictive.  

filename=$proxy kubeconfig file
# This checks the existance of proxy kubeconfig file

if [ -f "$filename"  ]; then 
chmod 644 <proxy kubeconfig file>
# If kube-proxy is running, and if it is using a file-based kubeconfig file, this will ensure that the proxy kubeconfig file has permissions of 644 or more restrictive

else 
echo "File does not exist"
fi 

#############
# Audit check 
#############

# The following bash shall:
# cd to local path for kubeconfig on EKS
# run stat -c %a <proxy kubeconfig file>
# check for allowed values [644, Define] - where if equals allowed values this return [ok]. Need a conditional statement in bash if echo "OK" next CIS step.

cd / # Define path 
file='proxy kubeconfig file'
stat -c %a <proxy kubeconfig file>
if "644"
then
echo "OK"  # I have done the check in bash but this should be in ruby too. 
else
echo "FAIL"

# Should 


###########
# CIS 4.1.4
###########

# The kubeconfig file for kube-proxy controls various parameters for the kube-proxy service in the worker node. 
# You should set its file ownership to maintain the integrity of the file. 
# The file should be owned by root:root.

cd /etc/kubernetes/  
# Check path

filename=$proxy kubeconfig file
# This checks the existance of proxy kubeconfig file
# If the file exists below bash ensures that the proxy kubeconfig file ownership is set to root:root

if [ -f "$filename"  ]; then 
chown root:root <proxy kubeconfig file>



else 
echo "File does not exist"
fi 

# Note Kube-proxy is run as semi-root priv - Needs to read this file for its runtime params. Should just do basic test of this with SELinux post this change to verify doesnt break by spawning a pod checking it is assigned an IP via the CNI/Kube Proxy.

#############
# Audit check 
#############



#########
# CIS 4.1.5
#########

# Ensure that the kubelet.conf file permissions are set to 644 or more restrictive

cd /etc/kubernetes/
filename=$kubelet.conf
# This checks the existance of kubelet.conf

if [ -f "$filename"  ]; then 
chmod 644 /etc/kubernetes/kubelet.conf

else 
echo "File does not exist"
fi 

# The kubelet.conf file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. 
# You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
# Above shouldnt effect functionality. 

#############
# Audit check 
#############

#######
# CIS 4.1.6 
#######

# Shall ensure that the kubelet.conf file ownership is set to root:root
# The kubelet.conf file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.
# Note kubelet.conf is readonly at runtime for kubelet as part of kubelet execution.  Should never be modifiable during runtime. Should stop Kubelet before. 

cd /etc/kubernetes/
filename=$kubelet.conf
# This checks the existance of kubelet.conf

if [ -f "$filename"  ]; then 
chown root:root /etc/kubernetes/kubelet.conf

else 
echo "File does not exist"
fi 


#############
# Audit check 
#############


####
# 4.1.7 - RISK ITEM - Needs careful checking and testing
####


# Ensure that the certificate authorities file permissions are set to 644 or more restrictive
# The certificate authorities file controls the authorities used to validate API requests. 
# You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.
# MUST Find file with --client-ca-file

cd /etc/kubernetes/
filename=$client-ca-file

if [ -f "$filename"  ]; then 
sudo chmod 644 --client-ca-file

else 
echo "File does not exist"
fi 

# Need to check this is on NODE as its used by the MASTER API THAT IS CONTROL PLANE
# By default no --client-ca-file is specified.  Need to check what EKS supports.  Not with EKS Master CA is not modifiable, uses an AWS owned CA. 


#############
# Audit check 
#############


#########
# CIS 4.1.8 
#########

# Ensure that the client certificate authorities file ownership is set to root:root

# Shall find file with --client-ca-file
cd /etc/kubernetes/
filename=$client-ca-file

if [ -f "$filename"  ]; then 
chown root:root /etc/kubernetes/client-ca-file

else 
echo "File does not exist"
fi 


#########
# CIS 4.1.9
#########




