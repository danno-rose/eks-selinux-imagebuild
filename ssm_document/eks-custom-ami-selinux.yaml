schemaVersion: "0.3"
description: SSM Document to create custom eks-ami
assumeRole: ${automation_role}
parameters:
  amiId:
    type: String
    description: base ami to build from (we are using Amazon Linux 2 EKS-Optimized-AMI)
    default: "${source_ami_id}"
  instanceType:
    type: String
    description:
    default: ${instance_size}
  SSMInstallationUserData:
    type: String
    description: userdata installing ssm - used when launching inital instance (base64Encoded)
    default: "IyEvYmluL2Jhc2gKY2QgL3RtcApzdWRvIHl1bSBpbnN0YWxsIC15IGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9lYzItZG93bmxvYWRzLXdpbmRvd3MvU1NNQWdlbnQvbGF0ZXN0L2xpbnV4X2FtZDY0L2FtYXpvbi1zc20tYWdlbnQucnBtCnN1ZG8gc3lzdGVtY3RsIGVuYWJsZSBhbWF6b24tc3NtLWFnZW50CnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IGFtYXpvbi1zc20tYWdlbnQ="
  subnetID:
    type: String
    description:
    default: ${subnet_id}
  securityGroupID:
    type: String
    description:
    default: ${securitygroup_id}
  IAMInstanceProfile:
    type: String
    description:
    default: ${instance_profile_name}
  terminateInstanceOnFailure:
    type: Boolean
    description: (Optional) Terminate the instance when build failed
    default: true
  scanFactorySNS:
    type: String
    description: sns topic for scan factory
    default: arn:aws:sns:eu-west-1:752991339866:scanFactory #arn:aws:sns:eu-west-1:618840856400:scan_factory_ami_submissions_v2
  NotificationSNS:
    type: String
    description: sns topic for scan factory
    default: scan_factory_ami_submissions_v2 #arn:aws:sns:eu-west-1:618840856400:scan_factory_ami_submissions_v2
  versionNumber:
    type: String
    description: versionNumber
    default: "1"
  ScriptsBucket:
    type: String
    description: path of the scripts bucket
    default: ${artifacts_bucket}
  CloudWatchLogGroupName:
    type: String
    description: Cloudwatch log group logging run command
    default: ${ssm_cloudwatch_loggroup}
mainSteps:
  # - name: startInstances
  #   action: "aws:runInstances"
  #   timeoutSeconds: 3600
  #   maxAttempts: 1
  #   onFailure: Abort
  #   inputs:
  #     ImageId: "{{ amiId }}"
  #     InstanceType: "{{instanceType}}"
  #     MinInstanceCount: 1
  #     MaxInstanceCount: 1
  #     SubnetId: "{{ subnetID }}"
  #     SecurityGroupIds:
  #       - "{{ securityGroupID }}"
  #     UserData: "{{SSMInstallationUserData}}"
  #     IamInstanceProfileName: "{{ IAMInstanceProfile }}"

  # # - name: installPreReqs
  # #   action: aws:runCommand
  # #   maxAttempts: 3
  # #   timeoutSeconds: 300
  # #   onFailure: "step:FailureHandling"
  # #   inputs:
  # #     DocumentName: AWS-RunShellScript
  # #     CloudWatchOutputConfig:
  # #       CloudWatchOutputEnabled: true
  # #       CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
  # #     InstanceIds:
  # #       - "{{startInstances.InstanceIds}}"
  # #     Parameters:
  # #       commands:
  # #         - yum install -y aws-cli

  # # - name: downloadS3Files
  # #   action: aws:runCommand
  # #   maxAttempts: 3
  # #   timeoutSeconds: 300
  # #   onFailure: "step:FailureHandling"
  # #   inputs:
  # #     DocumentName: AWS-RunShellScript
  # #     CloudWatchOutputConfig:
  # #       CloudWatchOutputEnabled: true
  # #       CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
  # #     InstanceIds:
  # #       - "{{startInstances.InstanceIds}}"
  # #     Parameters:
  # #       commands:
  # #         - sudo mkdir -v /buildfiles
  # #         - cd /buildfiles
  # #         - aws s3 cp s3://{{ScriptsBucket}}/scripts/selinux selinux
  # #         - aws s3 cp s3://{{ScriptsBucket}}/scripts/cluster-autoscaler.pp cluster-autoscaler.pp

  # # - name: runSELinuxScript
  # #   action: "aws:runCommand"
  # #   maxAttempts: 3
  # #   timeoutSeconds: 3600
  # #   onFailure: "step:FailureHandling"
  # #   nextStep: "installCustomSELinuxModules"
  # #   inputs:
  # #     DocumentName: AWS-RunShellScript
  # #     CloudWatchOutputConfig:
  # #       CloudWatchOutputEnabled: true
  # #       CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
  # #     InstanceIds:
  # #       - "{{startInstances.InstanceIds}}"
  # #     Parameters:
  # #       commands:
  # #         - chmod +x /buildfiles/selinux
  # #         - /buildfiles/selinux
  # #   outputs:
  # #     - Name: JobStatus
  # #       Selector: $.Status
  # #       Type: String

  # # - name: installCustomSELinuxModules
  # #   action: "aws:runCommand"
  # #   maxAttempts: 3
  # #   timeoutSeconds: 3600
  # #   onFailure: "step:FailureHandling"
  # #   nextStep: "cleanAndCreateBranch"
  # #   inputs:
  # #     DocumentName: AWS-RunShellScript
  # #     CloudWatchOutputConfig:
  # #       CloudWatchOutputEnabled: true
  # #       CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
  # #     InstanceIds:
  # #       - "{{startInstances.InstanceIds}}"
  # #     Parameters:
  # #       commands:
  # #         - echo "Installing custom linux modules"
  # #         - sudo semodule -i /buildfiles/cluster-autoscaler.pp
  # #   outputs:
  # #     - Name: JobStatus
  # #       Selector: $.Status
  # #       Type: String

  # - name: cleanAndCreateBranch
  #   action: "aws:branch"
  #   inputs:
  #     Choices:
  #       - NextStep: removePreReqs
  #         Variable: "{{installCustomSELinuxModules.JobStatus}}"
  #         StringEquals: Success
  #     Default: terminateInstance

  # - name: removePreReqs
  #   action: aws:runCommand
  #   maxAttempts: 3
  #   timeoutSeconds: 300
  #   onFailure: "step:FailureHandling"
  #   nextStep: stopInstance
  #   inputs:
  #     DocumentName: AWS-RunShellScript
  #     CloudWatchOutputConfig:
  #       CloudWatchOutputEnabled: true
  #       CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
  #     InstanceIds:
  #       - "{{startInstances.InstanceIds}}"
  #     Parameters:
  #       commands:
  #         - yum remove -y aws-cli

  # - name: stopInstance
  #   action: "aws:changeInstanceState"
  #   timeoutSeconds: 1200
  #   maxAttempts: 1
  #   onFailure: "step:FailureHandling"
  #   nextStep: CreateImage
  #   inputs:
  #     InstanceIds:
  #       - "{{ startInstances.InstanceIds }}"
  #     DesiredState: stopped

  # - name: CreateImage
  #   action: "aws:createImage"
  #   maxAttempts: 3
  #   nextStep: SmokeTestAutomation
  #   onFailure: "step:FailureHandling"
  #   inputs:
  #     InstanceId: "{{startInstances.InstanceIds}}"
  #     ImageName: "Amazon-Linux-2-EKS-Optimized-SELinux-Enabled-v{{versionNumber}}"
  #     ImageDescription: "HSBC Build of Amazon Linux 2 EKS Optimized with SELinux Enabled."

  - name: SmokeTestAutomation
    action: aws:executeAutomation
    maxAttempts: 3
    timeoutSeconds: 300
    onFailure: "step:FailureHandling"
    nextStep: stopInstance
    inputs:
      DocumentName: AWS-RunShellScript
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - yum remove -y aws-cli

  - name: stopInstance
    action: "aws:changeInstanceState"
    timeoutSeconds: 1200
    maxAttempts: 1
    onFailure: "step:FailureHandling"
    nextStep: CreateImage
    inputs:
      InstanceIds:
        - "{{ startInstances.InstanceIds }}"
      DesiredState: stopped

  - name: CreateImage
    action: "aws:createImage"
    maxAttempts: 3
    nextStep: Secondary_Automation_Workflow
    onFailure: "step:FailureHandling"
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      DocumentName: eks_ami_selinux_smoketest
      RuntimeParameters:
        amiId: "{{ amiId }}"
        subnetID: "{{ subnetID }}"
        securityGroupID: "{{ securityGroupID }}"
        IAMInstanceProfile: "{{ IAMInstanceProfile }}"

  # - name: Secondary_Automation_Workflow
  #   action: aws:executeAutomation
  #   maxAttempts: 3
  #   timeoutSeconds: 3600
  #   onFailure: Abort
  #   inputs:
  #     DocumentName: eks_ami_selinux_smoketest
  #     RuntimeParameters:
  #       amiId: "{{CreateImage.ImageId}}"
  #       subnetID: "{{ subnetID }}"
  #       securityGroupID: "{{ securityGroupID }}"
  #       IAMInstanceProfile: "{{ IAMInstanceProfile }}"

  - name: CreateImageTags
    action: "aws:createTags"
    maxAttempts: 3
    nextStep: terminateInstance
    onFailure: "step:FailureHandling"
    inputs:
      ResourceType: EC2
      ResourceIds:
        - "{{CreateImage.ImageId}}"
      Tags:
        - Key: "Name"
          Value: "HSBC-AmazonLinux2-EKS-Optimzed-SELinux-v{{versionNumber}}"
        - Key: "Owner"
          Value: "GCS"
        - Key: Version
          Value: "{{versionNumber}}"
        - Key: "OS"
          Value: "Amazon Linux 2"
        - Key: "Product"
          Value: "HSBC EKS Optimized SeLinux"

  - name: terminateInstance
    action: "aws:changeInstanceState"
    timeoutSeconds: 1200
    maxAttempts: 1
    onFailure: Continue
    nextStep: SendToEKSTestHarness
    inputs:
      InstanceIds:
        - "{{ startInstances.InstanceIds }}"
      DesiredState: terminated

  - name: SendToEKSTestHarness
    action: "aws:executeAwsApi"
    nextStep: endBuild
    onFailure: "step:FailureHandling"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{scanFactorySNS}}"
      #TODO: Message: "{'ImageId':'{{createImage.ImageId}}','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
      Message: "{'ImageId':'{{CreateImage.ImageId}}','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
    outputs:
      - Name: MessageId
        Selector: $.MessageId
        Type: String

  # - name: ScanAMI_v2
  #   action: "aws:executeAwsApi"
  #   nextStep: endBuild
  #   onFailure: "step:FailureHandling"
  #   inputs:
  #     Service: sns
  #     Api: Publish
  #     TopicArn: "{{scanFactorySNS}}"
  #     #TODO: Message: "{'ImageId':'{{createImage.ImageId}}','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
  #     Message: "{'ImageId':'my-testImage','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
  #   outputs:
  #     - Name: MessageId
  #       Selector: $.MessageId
  #       Type: String

  - name: endBuild
    action: "aws:sleep"
    maxAttempts: 3
    isCritical: false
    isEnd: true
    onFailure: Continue
    inputs:
      Duration: PT5S

  - name: FailureHandling
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: TerminateInstanceOnFailure
          Variable: "{{terminateInstanceOnFailure}}"
          BooleanEquals: true

  - name: TerminateInstanceOnFailure
    action: "aws:changeInstanceState"
    maxAttempts: 3
    isCritical: false
    nextStep: EndFailureHandlingBranch
    onFailure: Continue
    inputs:
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      DesiredState: terminated

  - name: EndFailureHandlingBranch
    action: "aws:sleep"
    maxAttempts: 3
    isCritical: false
    isEnd: true
    onFailure: Continue
    inputs:
      Duration: PT5S
