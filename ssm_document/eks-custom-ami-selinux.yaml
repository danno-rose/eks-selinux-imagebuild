schemaVersion: "0.3"
description: SSM Document to create custom eks-ami
assumeRole: ${automation_role}
parameters:
  amiId:
    type: String
    description: base ami to build from (we are using Amazon Linux 2 EKS-Optimized-AMI)
    default: "${source_ami_id}"
  instanceType:
    type: String
    description:
    default: ${instance_size}
  SSMInstallationUserData:
    type: String
    description: userdata installing ssm - used when launching inital instance (base64Encoded)
    default: "IyEvYmluL2Jhc2gKY2QgL3RtcApzdWRvIHl1bSBpbnN0YWxsIC15IGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9lYzItZG93bmxvYWRzLXdpbmRvd3MvU1NNQWdlbnQvbGF0ZXN0L2xpbnV4X2FtZDY0L2FtYXpvbi1zc20tYWdlbnQucnBtCnN1ZG8gc3lzdGVtY3RsIGVuYWJsZSBhbWF6b24tc3NtLWFnZW50CnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IGFtYXpvbi1zc20tYWdlbnQ="
  subnetID:
    type: String
    description:
    default: ${subnet_id}
  securityGroupID:
    type: String
    description:
    default: ${securitygroup_id}
  IAMInstanceProfile:
    type: String
    description:
    default: ${instance_profile_name}
  terminateInstanceOnFailure:
    type: Boolean
    description: (Optional) Terminate the instance when build failed
    default: true
  scanFactorySNS:
    type: String
    description: sns topic for scan factory
    default: arn:aws:sns:eu-west-1:752991339866:scanFactory #arn:aws:sns:eu-west-1:618840856400:scan_factory_ami_submissions_v2
  NotificationSNS:
    type: String
    description: sns topic for scan factory
    default: scan_factory_ami_submissions_v2 #arn:aws:sns:eu-west-1:618840856400:scan_factory_ami_submissions_v2
  versionNumber:
    type: String
    description: versionNumber
    default: "1"
  ScriptsBucket:
    type: String
    description: path of the scripts bucket
    default: ${artifacts_bucket}
  CloudWatchLogGroupName:
    type: String
    description: Cloudwatch log group logging run command
    default: ${ssm_cloudwatch_loggroup}
  eksClusterSmoketestDoc:
    type: String
    description: Document name for eks smokeTestAMI
    default: ${eks_smoketest_ssm_doc}
  amiConfigProfile:
    type: String
    description: branch
    default: EKS
mainSteps:
  - name: startInstances
    action: "aws:runInstances"
    timeoutSeconds: 3600
    maxAttempts: 1
    onFailure: Abort
    inputs:
      ImageId: "{{ amiId }}"
      InstanceType: "{{instanceType}}"
      MinInstanceCount: 1
      MaxInstanceCount: 1
      SubnetId: "{{ subnetID }}"
      SecurityGroupIds:
        - "{{ securityGroupID }}"
      UserData: "{{SSMInstallationUserData}}"
      IamInstanceProfileName: "{{ IAMInstanceProfile }}"

  - name: installPreReqs
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 300
    onFailure: "step:FailureHandling"
    inputs:
      DocumentName: AWS-RunShellScript
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - yum install -y aws-cli

  - name: downloadS3Files
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 300
    onFailure: "step:FailureHandling"
    inputs:
      DocumentName: AWS-RunShellScript
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - "sudo aws s3 cp s3://{{ScriptsBucket}}/scripts /buildfiles --recursive"

  - name: runSELinuxScript
    action: "aws:runCommand"
    maxAttempts: 3
    timeoutSeconds: 3600
    onFailure: "step:FailureHandling"
    #nextStep: "installCustomSELinuxModules"
    inputs:
      DocumentName: AWS-RunShellScript
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - |
            #!/usr/bin/env bash
            ## update system and install seLinux tools
            sudo yum update -y
            sudo yum install -y policycoreutils-python selinux-policy-devel jq

            # ## Install the SELinux Tools -- install RPMS without dependancies, in order to get around cyclic dependancies
            cd ~
            wget https://rpmfind.net/linux/centos/7.7.1908/os/x86_64/Packages/setroubleshoot-server-3.2.30-7.el7.x86_64.rpm
            wget https://rpmfind.net/linux/centos/7.7.1908/os/x86_64/Packages/setroubleshoot-plugins-3.0.67-4.el7.noarch.rpm
            sudo rpm -i  --nodeps setroubleshoot-server-3.2.30-7.el7.x86_64.rpm
            sudo rpm -i  --nodeps setroubleshoot-plugins-3.0.67-4.el7.noarch.rpm
            #Then yum re-install to include dependancies
            sudo yum reinstall -y setroubleshoot-server-3.2.30-7.el7.x86_64.rpm
            sudo yum reinstall -y setroubleshoot-plugins-3.0.67-4.el7.noarch.rpm

            ## Installing the Container-SELinux Policy
            sudo yum install -y http://vault.centos.org/7.6.1810/extras/x86_64/Packages/container-selinux-2.68-1.el7.noarch.rpm

            ## Update SELinux Config Files
            sudo sed -i 's/SELINUX=disabled/SELINUX=enforcing/g' /etc/selinux/config

            ## updating the docker runtime config
            VAL=$(cat /etc/docker/daemon.json)
            sudo mv /etc/docker/daemon.json /etc/docker/daemon.json_bak
            echo $VAL | jq '. += {"selinux-enabled":true}' | sudo tee -a /etc/docker/daemon.json
    outputs:
      - Name: JobStatus
        Selector: $.Status
        Type: String

  - name: installCustomSELinuxModules
    action: "aws:runCommand"
    maxAttempts: 3
    timeoutSeconds: 3600
    onFailure: "step:FailureHandling"
    nextStep: "cleanAndCreateBranch"
    inputs:
      DocumentName: AWS-RunShellScript
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - set -e
          - echo "Installing custom linux modules"
          - sudo semodule -i /buildfiles/cluster-autoscaler.pp
          - yes | sudo cp /buildfiles/hsbc-hostname-awsid /usr/lib/systemd/hsbc-hostname-awsid
          - sudo chown root.root /usr/lib/systemd/hsbc-hostname-awsid || true
          - sudo chmod 755 /usr/lib/systemd/hsbc-hostname-awsid || true
          - yes | sudo cp /buildfiles/hsbc-hostname-id.service || /etc/systemd/system/hsbc-hostname-id.service
          - sudo chown root.root /etc/systemd/system/hsbc-hostname-id.service || true
          - sudo chmod 644 /etc/systemd/system/hsbc-hostname-id.service || true
          - sudo systemctl enable hsbc-hostname-id.service
          - sudo systemctl start hsbc-hostname-id.service
    outputs:
      - Name: JobStatus
        Selector: $.Status
        Type: String

  - name: cleanAndCreateBranch
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: stopInstance
          Variable: "{{runSELinuxScript.JobStatus}}"
          StringEquals: Success
      Default: terminateInstance

  # - name: removePreReqs
  #   action: aws:runCommand
  #   maxAttempts: 3
  #   timeoutSeconds: 300
  #   onFailure: "step:FailureHandling"
  #   nextStep: stopInstance
  #   inputs:
  #     DocumentName: AWS-RunShellScript
  #     CloudWatchOutputConfig:
  #       CloudWatchOutputEnabled: true
  #       CloudWatchLogGroupName: "{{ CloudWatchLogGroupName }}"
  #     InstanceIds:
  #       - "{{startInstances.InstanceIds}}"
  #     Parameters:
  #       commands:
  #         - yum remove -y aws-cli

  - name: stopInstance
    action: "aws:changeInstanceState"
    timeoutSeconds: 1200
    maxAttempts: 1
    onFailure: "step:FailureHandling"
    nextStep: CreateImage
    inputs:
      InstanceIds:
        - "{{ startInstances.InstanceIds }}"
      DesiredState: stopped

  - name: CreateImage
    action: "aws:createImage"
    maxAttempts: 3
    nextStep: runSmokeTestAMI
    onFailure: "step:FailureHandling"
    inputs:
      InstanceId: "{{startInstances.InstanceIds}}"
      ImageName: "Amazon-Linux-2-EKS-Optimized-SELinux-Enabled-v{{versionNumber}}-{{ startInstances.InstanceIds }}"
      ImageDescription: "HSBC Build of Amazon Linux 2 EKS Optimized with SELinux Enabled."

  - name: runSmokeTestAMI
    action: aws:branch
    inputs:
      Choices:
        - NextStep: startEKSTestingAutomation
          Variable: "{{ amiConfigProfile }}"
          StringEquals: EKS
      Default: CreateImageTags

  - name: startEKSTestingAutomation
    action: aws:executeAutomation
    maxAttempts: 1
    timeoutSeconds: 3600
    onFailure: "step:FailureHandling"
    nextStep: CreateImageTags
    inputs:
      DocumentName: "{{eksClusterSmoketestDoc}}"
      RuntimeParameters:
        eksNodeImageId: "{{CreateImage.ImageId}}" #"ami-035aeafef040ecd08"

  - name: CreateImageTags
    action: "aws:createTags"
    maxAttempts: 3
    nextStep: terminateInstance
    onFailure: "step:FailureHandling"
    inputs:
      ResourceType: EC2
      ResourceIds:
        - "{{CreateImage.ImageId}}"
      Tags:
        - Key: "Name"
          Value: "HSBC-AmazonLinux2-EKS-Optimzed-SELinux-v{{versionNumber}}"
        - Key: "Owner"
          Value: "GCS"
        - Key: Version
          Value: "{{versionNumber}}"
        - Key: "OS"
          Value: "Amazon Linux 2"
        - Key: "Product"
          Value: "HSBC EKS Optimized SeLinux"

  - name: terminateInstance
    action: "aws:changeInstanceState"
    timeoutSeconds: 1200
    maxAttempts: 1
    onFailure: Continue
    #nextStep: SendToEKSTestHarness
    inputs:
      InstanceIds:
        - "{{ startInstances.InstanceIds }}"
      DesiredState: terminated

  # - name: SendToEKSTestHarness
  #   action: "aws:executeAwsApi"
  #   nextStep: endBuild
  #   onFailure: "step:FailureHandling"
  #   inputs:
  #     Service: sns
  #     Api: Publish
  #     TopicArn: "{{scanFactorySNS}}"
  #     #TODO: Message: "{'ImageId':'{{createImage.ImageId}}','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
  #     Message: "{'ImageId':'{{CreateImage.ImageId}}','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
  #   outputs:
  #     - Name: MessageId
  #       Selector: $.MessageId
  #       Type: String

  # # - name: ScanAMI_v2
  #   action: "aws:executeAwsApi"
  #   nextStep: endBuild
  #   onFailure: "step:FailureHandling"
  #   inputs:
  #     Service: sns
  #     Api: Publish
  #     TopicArn: "{{scanFactorySNS}}"
  #     #TODO: Message: "{'ImageId':'{{createImage.ImageId}}','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
  #     Message: "{'ImageId':'my-testImage','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
  #   outputs:
  #     - Name: MessageId
  #       Selector: $.MessageId
  #       Type: String

  - name: endBuild
    action: "aws:sleep"
    maxAttempts: 3
    isCritical: false
    isEnd: true
    onFailure: Continue
    inputs:
      Duration: PT5S

  - name: FailureHandling
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: TerminateInstanceOnFailure
          Variable: "{{terminateInstanceOnFailure}}"
          BooleanEquals: true

  - name: TerminateInstanceOnFailure
    action: "aws:changeInstanceState"
    maxAttempts: 3
    isCritical: false
    nextStep: EndFailureHandlingBranch
    onFailure: Continue
    inputs:
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      DesiredState: terminated

  - name: EndFailureHandlingBranch
    action: "aws:sleep"
    maxAttempts: 3
    isCritical: false
    isEnd: true
    onFailure: Continue
    inputs:
      Duration: PT5S
