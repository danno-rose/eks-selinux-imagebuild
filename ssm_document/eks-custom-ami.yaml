schemaVersion: "0.3"
description: SSM Document to create custom eks-ami
assumeRole: ${automation_role}
parameters:
  amiId:
    type: String
    description: base ami to build from (we are using Amazon Linux 2 EKS-Optimized-AMI)
    default: "${source_ami_id}"
  instanceType:
    type: String
    description:
    default: ${instance_size}
  SSMInstallationUserData:
    type: String
    description: userdata installing ssm - used when launching inital instance (base64Encoded)
    default: "IyEvYmluL2Jhc2gKY2QgL3RtcApzdWRvIHl1bSBpbnN0YWxsIC15IGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9lYzItZG93bmxvYWRzLXdpbmRvd3MvU1NNQWdlbnQvbGF0ZXN0L2xpbnV4X2FtZDY0L2FtYXpvbi1zc20tYWdlbnQucnBtCnN1ZG8gc3lzdGVtY3RsIGVuYWJsZSBhbWF6b24tc3NtLWFnZW50CnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IGFtYXpvbi1zc20tYWdlbnQ="
  subnetID:
    type: String
    description:
    default: ${subnet_id}
  securityGroupID:
    type: String
    description:
    default: ${securitygroup_id}
  IAMInstanceProfile:
    type: String
    description:
    default: ${instance_profile_name}
  buildFilesRepo:
    type: String
    description:
    default: ${buildfiles_repo}
  terminateInstanceOnFailure:
    type: Boolean
    description: (Optional) Terminate the instance when build failed
    default: true
  testingBranch:
    type: Boolean
    description: (Optional) Clean up and create AMI on success
    default: false
  scanFactorySNS:
    type: String
    description: sns topic for scan factory
    default: arn:aws:sns:eu-west-1:752991339866:scanFactory #arn:aws:sns:eu-west-1:618840856400:scan_factory_ami_submissions_v2
  NotificationSNS:
    type: String
    description: sns topic for scan factory
    default: scan_factory_ami_submissions_v2 #arn:aws:sns:eu-west-1:618840856400:scan_factory_ami_submissions_v2

mainSteps:
  - name: testingBranch
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: ScanAMI_v2
          Variable: "{{testingBranch}}"
          BooleanEquals: true

  - name: startInstances
    action: "aws:runInstances"
    timeoutSeconds: 3600
    maxAttempts: 1
    onFailure: Abort
    inputs:
      ImageId: "{{ amiId }}"
      InstanceType: "{{instanceType}}"
      MinInstanceCount: 1
      MaxInstanceCount: 1
      SubnetId: "{{ subnetID }}"
      SecurityGroupIds:
        - "{{ securityGroupID }}"
      UserData: "{{SSMInstallationUserData}}"
      IamInstanceProfileName: "{{ IAMInstanceProfile }}"

  - name: installPreReqs
    action: aws:runCommand
    maxAttempts: 3
    timeoutSeconds: 300
    onFailure: "step:FailureHandling"
    inputs:
      DocumentName: AWS-RunShellScript
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - yum install -y git

  - name: runSELinuxScript
    action: "aws:runCommand"
    maxAttempts: 3
    timeoutSeconds: 3600
    onFailure: "step:FailureHandling"
    nextStep: "cleanAndCreateBranch"
    inputs:
      DocumentName: AWS-RunShellScript
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - sudo mkdir /buildfiles
          - git clone {{ buildFilesRepo }} /buildfiles
          - ls -lah /buildfiles
          - chmod +x /buildfiles/selinux
          - /buildfiles/selinux
          - echo $(getenforce)
    outputs:
      - Name: JobStatus
        Selector: $.Status
        Type: String

  # - name: runCISLevel1Script
  #   action: "aws:runCommand"
  #   maxAttempts: 3
  #   timeoutSeconds: 3600
  #   onFailure: "step:FailureHandling"
  #   nextStep: "cleanAndCreateBranch"
  #   inputs:
  #     DocumentName: AWS-RunShellScript
  #     CloudWatchOutputConfig:
  #       CloudWatchOutputEnabled: true
  #     InstanceIds:
  #       - "{{startInstances.InstanceIds}}"
  #     Parameters:
  #       commands:
  #         - chmod +x /buildfiles/cisLevel1
  #         - /buildfiles/cisLevel1
  #   outputs:
  #     - Name: JobStatus
  #       Selector: $.Status
  #       Type: String

  - name: cleanAndCreateBranch
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: stopInstance
          Variable: "{{runSELinuxScript.JobStatus}}"
          StringEquals: Success
      Default: terminateInstance

  - name: stopInstance
    action: "aws:changeInstanceState"
    timeoutSeconds: 1200
    maxAttempts: 1
    onFailure: "step:FailureHandling"
    #  nextStep: "CreateImage"
    inputs:
      InstanceIds:
        - "{{ startInstances.InstanceIds }}"
      DesiredState: stopped

  - name: CreateImage
    action: "aws:createImage"
    maxAttempts: 3
    nextStep: CreateImageTags
    onFailure: "step:FailureHandling"
    inputs:
      InstanceId: "{{startInstances.InstanceIds}}"
      ImageName: "Amazon-Linux-2-EKS-Optimized-SELinux-Enabled" #TODO:Create a proper name include version of EKS
      ImageDescription: "HSBC Build of Amazon Linux 2 EKS Optimized with SELinux Enabled."

  - name: CreateImageTags
    action: "aws:createTags"
    maxAttempts: 3
    nextStep: ScanAMI_v2
    onFailure: "step:FailureHandling"
    inputs:
      ResourceType: EC2
      ResourceIds:
        - "{{CreateImage.ImageId}}"
      Tags:
        - Key: "Name"
          Value: "{{CreateImage.ImageId}}-EKS-Optimzed-SELinux-CISLevel1/v1"
        - Key: "Owner"
          Value: "GCS"
        - Key: Version
          Value: "{{VersionIncrementValue}}" #TODO:State to be written to DynamoDB

  - name: terminateInstance
    action: "aws:changeInstanceState"
    timeoutSeconds: 1200
    maxAttempts: 1
    onFailure: Continue
    nextStep: ScanAMI_v2
    inputs:
      InstanceIds:
        - "{{ startInstances.InstanceIds }}"
      DesiredState: terminated

  - name: ScanAMI_v2
    action: "aws:executeAwsApi"
    nextStep: endBuild
    onFailure: "step:FailureHandling"
    inputs:
      Service: sns
      Api: Publish
      TopicArn: "{{scanFactorySNS}}"
      #TODO: Message: "{'ImageId':'{{createImage.ImageId}}','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
      Message: "{'ImageId':'my-testImage','AccountId':'{{global:ACCOUNT_ID}}','Notifications':'arn:aws:sns:{{global:REGION}}:{{global:ACCOUNT_ID}}:{{NotificationSNS}}','Region':'{{global:REGION}}'}"
    outputs:
      - Name: MessageId
        Selector: $.MessageId
        Type: String

  - name: endBuild
    action: "aws:sleep"
    maxAttempts: 3
    isCritical: false
    isEnd: true
    onFailure: Continue
    inputs:
      Duration: PT5S

  - name: FailureHandling
    action: "aws:branch"
    inputs:
      Choices:
        - NextStep: TerminateInstanceOnFailure
          Variable: "{{terminateInstanceOnFailure}}"
          BooleanEquals: true

  - name: TerminateInstanceOnFailure
    action: "aws:changeInstanceState"
    maxAttempts: 3
    isCritical: false
    nextStep: EndFailureHandlingBranch
    onFailure: Continue
    inputs:
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      DesiredState: terminated

  - name: EndFailureHandlingBranch
    action: "aws:sleep"
    maxAttempts: 3
    isCritical: false
    isEnd: true
    onFailure: Continue
    inputs:
      Duration: PT5S
