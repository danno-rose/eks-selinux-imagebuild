#TODO: START INSTANCE WITH ROLE THAT ALLOWS EKS
#TODO: STEP TO DOWNLOAD AND INSTALL TOOLS FROM S3
#TODO: STEP TO CONFIGURE KUBECTL /// DOES IT REQUIRE GET CREDS?
#TODO: STEPS TO TEST EKS CLUSTER
schemaVersion: "0.3"
description: SSM Document to create custom eks-ami -- Requirements // add a role to eks cluster that instance can assume
parameters:
  #TODO: DEFUALTS PARAMS FOR SELINUX WORKER NODES REQUIRED?
  eksStackName:
    type: String
    description: Name to be given to WorkNode function test stack
    default: ${eks_stackname}
  eksWorkerNodeStackURL:
    type: String
    description: URL for Amazon provide CF template to launch worker node
    default: "${Node_Stack_URL}"
  eksNodeImageId:
    type: String
    description: SELINUX custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.
  eksKeyName:
    type: String
    description: SSH key pair
    default: eks-keypair
  eksSubnetID:
    description: subnet for the instance and workernode used to run tests against cluster
    type: String
    default: ${eks_node_subnet}
  eksSecurityGroupID:
    description: SG for the instance and worker node used to run tests against cluster
    type: String
    default: ${eks_ControlPlaneSecurityGroup}
  eksVPC:
    description: vpc id for the instance and worker node used by CF to run tests against cluster
    type: String
    default: ${eks_vpc_id}
  kubectlAmiId:
    type: String
    description: ami for the instance used to run tests against cluster
    default: "{{ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
  kubectlInstancetype:
    type: String
    default: t2.medium
  kubectlUserData:
    type: String
    description: userdata installing ssm - used when launching inital instance (base64Encoded)
    default: "IyEvYmluL2Jhc2gKY2QgL3RtcApzdWRvIHl1bSBpbnN0YWxsIC15IGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9lYzItZG93bmxvYWRzLXdpbmRvd3MvU1NNQWdlbnQvbGF0ZXN0L2xpbnV4X2FtZDY0L2FtYXpvbi1zc20tYWdlbnQucnBtCnN1ZG8gc3lzdGVtY3RsIGVuYWJsZSBhbWF6b24tc3NtLWFnZW50CnN1ZG8gc3lzdGVtY3RsIHN0YXJ0IGFtYXpvbi1zc20tYWdlbnQ="
  kubectlIAMInstanceProfile:
    description: Instance Profile subnet for the instance used to run tests against cluster
    type: String
    default: ${kubectl_instance_profile}
  kubectlAssumeRole:
    type: String
    description: EKS IAM Role for kubectl instance to assume
    default: ${kubectl_AssumeRole}
mainSteps:
  ## This is the instance that will connect to the EKS Cluster
  - name: startInstances
    action: "aws:runInstances"
    timeoutSeconds: 3600
    maxAttempts: 1
    nextStep: installPreReqs
    onFailure: Abort
    inputs:
      ImageId: "{{ kubectlAmiId }}"
      InstanceType: "{{kubectlInstancetype}}"
      MinInstanceCount: 1
      MaxInstanceCount: 1
      SubnetId: "{{ eksSubnetID }}"
      SecurityGroupIds:
        - "{{ eksSecurityGroupID }}"
      UserData: "{{kubectlUserData}}"
      IamInstanceProfileName: "{{ kubectlIAMInstanceProfile }}"

  - name: installPreReqs
    action: aws:runCommand
    maxAttempts: 1
    timeoutSeconds: 300
    nextStep: workerNodeStack
    #onFailure: "step:TerminateInstanceOnFailure"
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - "{{startInstances.InstanceIds}}"
      Parameters:
        commands:
          - |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/kubectl
            sudo chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            echo "Installing JQ"
            sudo yum install jq

  - name: workerNodeStack
    action: aws:createStack
    maxAttempts: 1
    #onFailure: "step:TerminateInstanceOnFailure"
    #nextStep: deleteStack
    inputs:
      Capabilities:
        - CAPABILITY_IAM
      StackName: "{{eksStackName}}"
      TemplateURL: "{{ eksWorkerNodeStackURL }}"
      TimeoutInMinutes: 10
      Parameters:
        - ParameterKey: "NodeGroupName"
          ParameterValue: "SELinux-SmokeTest"
        - ParameterKey: "NodeImageId"
          ParameterValue: "{{eksNodeImageId}}"
        - ParameterKey: "KeyName"
          ParameterValue: "{{eksKeyName}}"
        - ParameterKey: NodeAutoScalingGroupDesiredCapacity
          ParameterValue: 1
        - ParameterKey: ClusterName
          ParameterValue: eks-1
        - ParameterKey: ClusterControlPlaneSecurityGroup
          ParameterValue: "{{eksSecurityGroupID}}"
        - ParameterKey: Subnets
          ParameterValue: "{{eksSubnetID}}"
        - ParameterKey: VpcId
          ParameterValue: "{{eksVPC}}"
  ## Test EKS cluster steps
  ## Tear down worker nodes CF
  # - name: deleteStack
  #   action: aws:deleteStack
  #   maxAttempts: 1
  #   onFailure: Abort
  #   inputs:
  #     StackName: "{{eksStackName}}"
  ##  Terminate TestInstance
  # - name: TerminateInstanceOnFailure
  #   action: "aws:changeInstanceState"
  #   maxAttempts: 3
  #   inputs:
  #     InstanceIds:
  #       - "{{startInstances.InstanceIds}}"
  #     DesiredState: terminated
